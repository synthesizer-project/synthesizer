

import numpy as np

import unyt
from unyt import c, h, nJy, erg, s, Hz, pc, Angstrom

from .sed import convert_fnu_to_flam


class units:

    wavelength = Angstrom
    luminosity = erg/s
    flux = erg/s/cm**2
    lnu = erg/s/Hz
    fnu = erg/s/Hz/cm**2
    ew = Angstrom


class Line:

    """
    A class representing a spectral line or set of lines (e.g. a doublet)

    Attributes
    ----------
    lam : wavelength of the line

    Methods
    -------

    """

    def __init__(self, id_, wavelength_, luminosity_, continuum_):

        self.id_ = id_
        self.wavelength_ = wavelength_
        self.luminosity_ = luminosity_
        self.continuum_ = continuum_

        self.id = ','.join(id_)
        self._continuum = np.mean(continuum_)  # Â mean continuum value in units of erg/s/Hz
        self._wavelength = np.mean(wavelength_)  # mean wavelength of the line in units of AA
        self._luminosity = np.sum(luminosity_)  # total luminosity of the line in units of erg/s/Hz

        self._flux = None  # line flux in erg/s/cm2, generated by method

        # continuum at line wavelength, erg/s/AA
        self._continuum_lam = convert_fnu_to_flam(self.wavelength, self.continuum)
        self._ew = self._luminosity / self._continuum_lam  # AA

    @property
    def wavelength(self):
        return self._wavelength * units.wavelength

    @property
    def luminosity(self):
        return self._luminosity * units.luminosity

    @property
    def continuum(self):
        return self._continuum * units.lnu

    @property
    def flux(self):
        return self._flux * units.flux

    @property
    def ew(self):
        return self._ew * units.ew

    def __str__(self):
        """Function to print a basic summary of the Line object.

        Returns a string containing the id, wavelength, luminosity, equivalent width, and flux if generated.

        Returns
        -------
        str
            Summary string containing the total mass formed and lists of the available SEDs, lines, and images.
        """

        # Set up string for printing
        pstr = ""

        # Add the content of the summary to the string to be printed
        pstr += "-"*10 + "\n"
        pstr += f"SUMMARY OF {self.id}" + "\n"
        pstr += f"wavelength/AA: {self.wavelength:.1f}"
        pstr += f"log10(luminosity/erg/s): {np.log10(self.luminosity):.2f}"
        pstr += f"equivalent width/AA: {self.ew:.0f}"
        if self.flux:
            pstr += f"log10(flux/erg/s/cm2): {np.log10(self.flux):.2f}"
        pstr += "-"*10

        return pstr

    def get_flux(self, cosmo, z):
        """Calculate the line flux in units of erg/s/cm2

        Returns the line flux and (optionally) updates the line object.

        Parameters
        -------
        cosmo: obj
            Astropy cosmology object

        z: float
            Redshift

        Returns
        -------
        flux: float
            Flux of the line in units of erg/s/cm2
            """

        luminosity_distance = cosmo.luminosity_distance(
            z).to('cm').value  # the luminosity distance in cm

        self._flux = self._luminosity / (4 * np.pi * luminosity_distance**2)

        return self._flux

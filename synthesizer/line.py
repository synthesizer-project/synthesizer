

import numpy as np
from dataclasses import dataclass
from .units import Quantity
from .sed import convert_fnu_to_flam
from . import exceptions


def get_line_id(id):
    """
    A class representing a spectral line or set of lines (e.g. a doublet)

    Arguments
    ----------
    id : str, list, tuple
        a str, list, or tuple containing the id(s) of the lines

    Returns
    -------
    string
        string representation of the id

    """

    if isinstance(id, list):
        return ','.join(id)
    else:
        return id


@dataclass
class LineRatios:

    """
    A dataclass holding useful line ratio diagnostics, e.g. BPT.
    """

    ratios = {}
    ratios['R23'] = [['O 3 4960.29A', 'O 3 5008.24A', 'O 2 3727.09A',
                      'O 2 3729.88A'], ['H 1 4862.69A']]  #  add reference
    ratios['R3'] = [['O 3 5008.24A'], ['H 1 4862.69A']]  #  add reference
    ratios['R2'] = [['O 2 3727.09A'], ['H 1 4862.69A']]  #  add reference

    ratios['O32'] = [['O 3 5008.24A'], ['O 2 3727.09A']]  #  add reference
    ratios['Ne3O2'] = [[''], ['O 2 3727.09A']]  #  add reference

    diagrams = {}
    diagrams['OHNO'] = [['O 3 4960.29A', 'O 3 5008.24A'], []]  #  add reference
    diagrams['BPT'] = [[], []]  #  add reference

    diagrams['VO78'] = [[], []]  #  Trump '15
    diagrams['unVO78'] = [[], []]  #  Trump '15


class Line:

    """
    A class representing a spectral line or set of lines (e.g. a doublet)

    Attributes
    ----------
    lam : wavelength of the line

    Methods
    -------

    """

    wavelength = Quantity()
    continuum = Quantity()
    luminosity = Quantity()
    flux = Quantity()
    ew = Quantity()

    def __init__(self, id_, wavelength_, luminosity_, continuum_):

        self.id_ = id_

        # --- these are maintained because we may want to hold on to the individual lines of a doublet
        self.wavelength_ = wavelength_
        self.luminosity_ = luminosity_
        self.continuum_ = continuum_

        self.id = get_line_id(id_)
        self.continuum = np.mean(continuum_)  #  mean continuum value in units of erg/s/Hz
        self.wavelength = np.mean(wavelength_)  # mean wavelength of the line in units of AA
        self.luminosity = np.sum(luminosity_)  # total luminosity of the line in units of erg/s/Hz
        self.flux = None  # line flux in erg/s/cm2, generated by method

        # continuum at line wavelength, erg/s/AA
        self._continuum_lam = convert_fnu_to_flam(self._wavelength, self._continuum)
        self.ew = self._luminosity / self._continuum_lam  # AA

    def __str__(self):
        """Function to print a basic summary of the Line object.

        Returns a string containing the id, wavelength, luminosity, equivalent width, and flux if generated.

        Returns
        -------
        str
            Summary string containing the total mass formed and lists of the available SEDs, lines, and images.
        """

        # Set up string for printing
        pstr = ""

        # Add the content of the summary to the string to be printed
        pstr += "-"*10 + "\n"
        pstr += f"SUMMARY OF {self.id}" + "\n"
        pstr += f"wavelength: {self.wavelength:.1f}" + "\n"
        pstr += f"log10(luminosity/{self.luminosity.units}): {np.log10(self.luminosity):.2f}" + "\n"
        pstr += f"equivalent width: {self.ew:.0f}" + "\n"
        if self._flux:
            pstr += f"log10(flux/{self.flux.units}): {np.log10(self.flux):.2f}"
        pstr += "-"*10

        return pstr

    def __add__(self, second_line):
        """
        Function allowing adding of two Line objects together. This should NOT be used to add different lines together.

        Returns
        -------
        obj (Line)
            New instance of Line
        """

        if second_line.id == self.id:

            return Line(self.id, self._wavelength, self._luminosity + second_line._luminosity, self._continuum + second_line._continuum)

        else:

            exceptions.InconsistentAddition('Wavelength grids must be identical')

    def get_flux(self, cosmo, z):
        """Calculate the line flux in units of erg/s/cm2

        Returns the line flux and (optionally) updates the line object.

        Parameters
        -------
        cosmo: obj
            Astropy cosmology object

        z: float
            Redshift

        Returns
        -------
        flux: float
            Flux of the line in units of erg/s/cm2
            """

        luminosity_distance = cosmo.luminosity_distance(
            z).to('cm').value  # the luminosity distance in cm

        self.flux = self._luminosity / (4 * np.pi * luminosity_distance**2)

        return self.flux
